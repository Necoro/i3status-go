{
    package parser

    type param struct {
        key string
        val string
    }
}

Config <- gp:Parms secs:Sections EOF {
    return &Config{gp.(Params), secs.([]Section)}, nil
}

Parms <- lines:ParmLine* {
    if lines == nil {
        return Params{}, nil
    }

    anys := lines.([]any)
    parms := Params{}
    for _, a := range anys {
        if a != nil {
            p := a.(param)
            parms[strings.ToLower(p.key)] = p.val
        }
    }

    return parms, nil
}


ParmLine <- line:(comment / Parm / _) NL {
        if p, ok := line.(param); ok {
            return p, nil
        }
        return nil, nil
}

Parm <- _ key:Ident _ Assign _ val:Val _ {
        return param{key.(string), val.(string)}, nil
    }

Val <- v:(ValString / RawVal) { return v, nil }
RawVal <- [^\n]* { return string(c.text), nil }
ValString <- ["] [^"\n]* ["] {
    // this is better than clubbing arrays of arrays of bytes together
    if l := len(c.text); l > 2 {
        return string(c.text[1:l-1]), nil
    }
    return "", nil
  }


Assign <- [=:]

Sections <- ss:Section* {
    if ss == nil {
        return []Section{}, nil
    }
    anys := ss.([]any)

    sections := make([]Section, len(anys))
    for i := range anys {
        sections[i] = anys[i].(Section)
    }
    return sections, nil
}

Section <- h:Header p:Parms {
        s := h.(Section)
        s.Params = p.(Params)
        return s, nil
    }

Header <- _ '[' _ name:Ident qual:Qualifier? _ ']' _ comment? NL {
        var q string
        if qual != nil { q = qual.(string) }
        s := Section{
            Name: strings.ToLower(name.(string)),
            Qualifier: strings.ToLower(q),
         }
        return s, nil
    }

Qualifier <- '.' q:Ident {
    return q.(string), nil
}

Ident <- [a-zA-Z0-9_]+ {
     return string(c.text), nil
}

comment <- [;#] [^\n]*

_ <- [ \t]*
NL <- '\n'

EOF <- !.